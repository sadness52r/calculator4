name: Python calculator tests

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build-n-publish:
    name: Build and publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Setup Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Building
        run: |
          python -m compileall .
      - name: Make zip directory
        run: |
          mkdir compiled
          mv **/*.pyc compiled
          zip -r compiled.zip compiled

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          if [[ $latest_tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IFS='.' read -r -a parts <<< "${latest_tag:1}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
          else
            new_tag="v1.0.0"
          fi
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

         - name: Create new tag
           run: |
              new_tag=${{ steps.bump_version.outputs.new_tag }}
              git tag $new_tag
              git push origin $new_tag

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Publishing
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./compiled.zip
          asset_name: compiled.zip
          asset_content_type: application/zip